Can Change Baudrate Api:
CAN436_Conf. The support of the Can_ChangeBaudrate API is optional.
If this parameter is set to true the Can_ChangeBaudrate and Can_CheckBaudrate API shall be supported. Otherwise the API is not supported

Development Error Detection :
CAN064_Conf: Switches the Development Error Detection and Notification: ON or OFF.
When this option is OFF code size is reduced, but no error detection is available.

Can Multiple CanIf Cbk  :
Enable the capability to manage Multiple CanIf Callback. 
Note: Implementation specific parameter. Not AutoSar Required.

Provide Version Info API  :
CAN106_Conf. Switches the Can_GetVersionInfo() API: ON or OFF.
When this option is ON driver supports API for getting Version information for the Driver.

Can Driver Index (0 -> 255):
CAN320_Conf. Specifies the InstanceId of this module instance.
If only one instance is present it shall have the Id 0.

Can Main Function Busoff Period (seconds) (0.001 -> 65.535)  :
CAN355_Conf. This parameter describes the period for cyclic call to Can_MainFunction_Busoff.
Unit is seconds.

Can Main Function Wakeup Period (seconds) (0.001 -> 65.535)  :
CAN357_Conf. This parameter describes the period for cyclic call to Can_MainFunction_Wakeup.
Unit is seconds.
This field is editable if CanConfigSet/CanController/CanWakeupSupport is 'true'. 

Can Main Function Mode Period (seconds) (0.001 -> 65.535)  :
CAN376_Conf. This parameter describes the period for cyclic call to Can_MainFunction_Mode.
Unit in seconds.

Can Multiplexed Transmission  :
CAN095_Conf. Specifies if Multiplexed Transmission shall be supported: ON or OFF.
Multiplex transmission means to search for a free MB, that has the same ObjectId with the one transmitted to Can_Write,if current Hth MB is busy.

Can Identical Id Cancellation  :
CAN378_Conf. Specifies if hardware cancellation with identical ID shall be supported: ON or OFF.
This option enables/disables cancellation of pending PDUs with identical ID. 

Can Timeout Duration (0.001 -> 65.535)  :
CAN113_Conf. Specifies the maximum time for blocking function until a timeout is detected. Unit is seconds.
This Timeout is used to detect the Hardware Errors/ Production Errors.
When Hardware registers like Controller Register (CCCR) or Bit Timing and Prescaler Register (NBTP) are configured, the Hardware take some time to take effect of these new settings requested.
Once timeout has been occured and if hardware could not take effect of the CAN settings, then Error is reported.
So this timeout is used to allow hardware to take effect of the Hardware settings. Note: In case TIMER SERVICE is not not based on a realtime counter, the value configured in CanTimeoutCycle will be used instead. 

Can Timeout Cycle (1 -> 2147483647)  :
CAN113_Conf. Specifies the maximum number of cycles for a blocking function until a timeout is detected. Unit in loops.
This Timeout is used to detect the Hardware Errors/ Production Errors.
When Hardware registers like Controller Register (CCCR) or Bit Timing and Prescaler Register (NBTP) are configured, the Hardware take some time to take effect of these new settings requested.
Once timeout has been occured and if hardware could not take effect of the CAN settings, then Error is reported.
So this timeout is used to allow hardware to take effect of the Hardware settings. Note: In case TIMER SERVICE is based on a realtime counter, the value configured in CanTimeoutDuration will be used instead. 

Can Hardware Cancellation  :
CAN069_Conf. Specifies if hardware cancellation shall be supported: ON or OFF.
This option activates the cancellation of MB's operation by calling Can_LLD_Cancel().

Can L-Pdu Receive Callout Function  :
CAN434_Conf:This parameter defines the existence and the name of a callout function that is called after a successful reception of a received CAN Rx L-PDU. If this parameter is omitted no callout shall take place. 

Can L-Pdu Custom receive Callout Function  :
This parameter defines the existence and the name of a custom callout function that is called after a successful reception of a received CAN Rx L-PDU.
If this parameter is omitted no callout shall take place.
Note: Implementation specific parameter. Not AutoSar Required. 

Can Controller Error Notification  :
Set here the name of the Error Interrupt controller notification function.
Note: Implementation specific parameter. Not AutoSar Required. 

Can RxFifo Warning Notification  :
Set here the name of the handler for RxFifo Warning notification function or NULL_PTR if disabled.
Note: Implementation specific parameter. Not AutoSar Required. 

Can RxFifo Overflow Notification  :
Set here the name of the handler for RxFifo Overflow notification function or NULL_PTR if disabled.
Note: Implementation specific parameter. Not AutoSar Required. 

Can RxFifo Non-Matching Filters Notification  :
This parameter defines the existence and the name of a callout function that is called after a received CAN Rx L-PDU doesn't match any of filters configured.
Note: Implementation specific parameter. Not AutoSar Required. 

Can Counter ref  :
CAN431_Conf. This parameter contains a reference to the counter, which is used by the CAN driver. 

CanSupportTTCANRef  :
CAN430_Conf. The parameter refers to CanIfSupportTTCAN parameter in the CAN Interface Module configuration.The CanIfSupportTTCAN parameter defines whether TTCAN is supported. 

Can Extended ID Support  :
Enables support of Extended/Mixed mode (permit to use IDs of 29 bits length).
Note: Implementation specific parameter. Not AutoSar Required. 

CanApiEnableMbAbort  :
Enables an additional API, to abort a message transmission.
Based on this value a define will be generated with STD_ON or STD_OFF value: CAN_API_ENABLE_ABORT_MB.
It is editable only if "CanHardwareCancellation" = true. 

CanEnableDualClockMode  :
Enables support for dual clock API. When this parameter is true will generate CAN_DUAL_CLOCK_MODE = STD_ON.
Note: This parameter is visible only if Can.CanConfig.DualClockMode = STD_ON from Resource files. 

Can MB Count Extension Support :
Enables support of more than 255 Can Hardware Objects.
Some platforms have a bigger number of Can controllers and the sum of total MBS for all controllers is bigger than uint8 size (as HTH/HRH is specified in Autosar).
This option should not be enabled for platforms that have a number of MBs smaller than 256 (summing all Can controllers from the platform).
Note: Implementation specific parameter. Not AutoSar Required.

CanAbortOnlyOneMB  :
When this parameter is true only one MB will be aborted by Can_AbortMb()
When this parameter is false all the associated mailboxes will be aborted when multiplex transmission is enabled
Note: This parameter is enabled only if CanMultiplexedTransmission is checked. 

